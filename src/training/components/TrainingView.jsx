import React from 'react';
import PropTypes from 'prop-types';
import ContentContainer from 'terra-content-container';
import ClinicalItemView from 'terra-clinical-item-view';
import Header from 'terra-clinical-header';
import StatusView from 'terra-status-view';
/* TODO: Add imports necessary for Kaiju props added below */
import { injectIntl } from 'react-intl';

const propTypes = {
  text: PropTypes.string,
  isLoading: PropTypes.bool,
  isFailed: PropTypes.bool,
  intl: PropTypes.object.isRequired,
};

const TrainingView = (props) => {
  const { isLoading, isFailed, text, intl } = props;
  let content;

  if (isLoading) {
    content = null;
  } else if (isFailed) {
    content = <StatusView variant={StatusView.Opts.variants.ERROR} message={intl.formatMessage({ id: 'orion-training.training-failed-to-load' })} isGlyphHidden />;
  } else if (text && text.length > 0) {
    content = <ClinicalItemView data-component-type="terra-clinical-item-view" displays={[<ClinicalItemView.Display text={text} />]} />;
  } else {
    content = <StatusView variant={StatusView.Opts.variants.NODATA} message={intl.formatMessage({ id: 'orion-training.no-training' })} isGlyphHidden />;
  }

  return (
    <ContentContainer header={<Header title={intl.formatMessage({ id: 'orion-training.training' })} />}>
      {/* TODO: Add UI props generated by https://kaiju.cerner.com */}
      {content}
    </ContentContainer>
  );
};

TrainingView.propTypes = propTypes;

export default injectIntl(TrainingView);
